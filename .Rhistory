mutate(country = factor(country, country)) %>%
# prepare text for tooltip
mutate(text = paste("Country: ", country, "\nPopulation (M): ", pop, "\nLife Expectancy: ", lifeExp, "\nGdp per capita: ", gdpPercap, sep="")) %>%
# Classic ggplot
ggplot( aes(x=gdpPercap, y=lifeExp, size = pop, color = continent, text=text)) +
geom_point(alpha=0.7) +
scale_size(range = c(1.4, 19), name="Population (M)") +
scale_color_viridis(discrete=TRUE, guide=FALSE) +
theme_ipsum() +
theme(legend.position="none")
library(gapminder)
data <- gapminder %>% filter(year=="2007") %>% dplyr::select(-year)
# Interactive version
p <- data %>%
mutate(gdpPercap=round(gdpPercap,0)) %>%
mutate(pop=round(pop/1000000,2)) %>%
mutate(lifeExp=round(lifeExp,1)) %>%
# Reorder countries to having big bubbles on top
arrange(desc(pop)) %>%
mutate(country = factor(country, country)) %>%
# prepare text for tooltip
mutate(text = paste("Country: ", country, "\nPopulation (M): ", pop, "\nLife Expectancy: ", lifeExp, "\nGdp per capita: ", gdpPercap, sep="")) %>%
# Classic ggplot
ggplot( aes(x=gdpPercap, y=lifeExp, size = pop, color = continent, text=text)) +
geom_point(alpha=0.7) +
scale_size(range = c(1.4, 19), name="Population (M)") +
scale_color_viridis(discrete=TRUE, guide=FALSE) +
theme_ipsum() +
theme(legend.position="none")
# The dataset is provided in the gapminder library
library(gapminder)
data <- gapminder %>% filter(year=="2007") %>% dplyr::select(-year)
# Interactive version
p <- data %>%
mutate(gdpPercap=round(gdpPercap,0)) %>%
mutate(pop=round(pop/1000000,2)) %>%
mutate(lifeExp=round(lifeExp,1)) %>%
# Reorder countries to having big bubbles on top
arrange(desc(pop)) %>%
mutate(country = factor(country, country)) %>%
# prepare text for tooltip
mutate(text = paste("Country: ", country, "\nPopulation (M): ", pop, "\nLife Expectancy: ", lifeExp, "\nGdp per capita: ", gdpPercap, sep="")) %>%
# Classic ggplot
ggplot( aes(x=gdpPercap, y=lifeExp, size = pop, color = continent, text=text)) +
geom_point(alpha=0.7) +
scale_size(range = c(1.4, 19), name="Population (M)") +
scale_color_viridis(discrete=TRUE, guide=FALSE) +
theme_ipsum() +
theme(legend.position="none")
pp <- ggplotly(p, tooltip="text")
pp
library(gapminder)
install.packages("gapminder")
data <- gapminder %>% filter(year=="2007") %>% dplyr::select(-year)
# Interactive version
p <- data %>%
mutate(gdpPercap=round(gdpPercap,0)) %>%
mutate(pop=round(pop/1000000,2)) %>%
mutate(lifeExp=round(lifeExp,1)) %>%
# Reorder countries to having big bubbles on top
arrange(desc(pop)) %>%
mutate(country = factor(country, country)) %>%
# prepare text for tooltip
mutate(text = paste("Country: ", country, "\nPopulation (M): ", pop, "\nLife Expectancy: ", lifeExp, "\nGdp per capita: ", gdpPercap, sep="")) %>%
# Classic ggplot
ggplot( aes(x=gdpPercap, y=lifeExp, size = pop, color = continent, text=text)) +
geom_point(alpha=0.7) +
scale_size(range = c(1.4, 19), name="Population (M)") +
scale_color_viridis(discrete=TRUE, guide=FALSE) +
theme_ipsum() +
theme(legend.position="none")
pp <- ggplotly(p, tooltip="text")
pp
data <- gapminder %>% filter(year=="2007") %>% dplyr::select(-year)
# Interactive version
p <- data %>%
mutate(gdpPercap=round(gdpPercap,0)) %>%
mutate(pop=round(pop/1000000,2)) %>%
mutate(lifeExp=round(lifeExp,1)) %>%
# Reorder countries to having big bubbles on top
arrange(desc(pop)) %>%
mutate(country = factor(country, country)) %>%
# prepare text for tooltip
mutate(text = paste("Country: ", country, "\nPopulation (M): ", pop, "\nLife Expectancy: ", lifeExp, "\nGdp per capita: ", gdpPercap, sep="")) %>%
# Classic ggplot
ggplot( aes(x=gdpPercap, y=lifeExp, size = pop, color = continent, text=text)) +
geom_point(alpha=0.7) +
scale_size(range = c(1.4, 19), name="Population (M)") +
scale_color_viridis(discrete=TRUE, guide=FALSE) +
theme_ipsum() +
theme(legend.position="none")
pp <- ggplotly(p, tooltip="text")
pp
=======
#
# symbols( st$Illiteracy, st$Murder,                 원의 x,y좌표
#          circles = st$Population,                  원의 반지름
#          inches = 0.3,                             원크기 조절값
#          fg = "white",                              원테두리 색
#          bg = "lightgray",                        원 바탕색
#          iwd = 1.5 ,                               원테두리선두께
#          xlab = "rate of Illiteracy",
#          ylab = "crime(murder) rate",
#          main = "Illiteracy and Crise",)
#
# text( st$Illiteracy, st$Murder,                       텍스트출력 xy좌표
#       rownames( st ),                                 출력할 text
#       cex= 0.6 ,                             폰트크기
#       col = "brown")                                폰트 컬러
#
# GGPLOT로 버블 차트 그리기 (사이트에서 복붙)
# https://www.r-graph-gallery.com/index.html
>>>>>>> ca4a4dcdedf2da1c83c929f62e18efc6ebcf85e3
# Libraries
library(ggplot2)
library(dplyr)
library(plotly)
library(viridis)
library(hrbrthemes)
# The dataset is provided in the gapminder library
library(gapminder)
data <- gapminder %>% filter(year=="2007") %>% dplyr::select(-year)
# Interactive version
p <- data %>%
mutate(gdpPercap=round(gdpPercap,0)) %>%
mutate(pop=round(pop/1000000,2)) %>%
mutate(lifeExp=round(lifeExp,1)) %>%
# Reorder countries to having big bubbles on top
arrange(desc(pop)) %>%
mutate(country = factor(country, country)) %>%
# prepare text for tooltip
mutate(text = paste("Country: ", country, "\nPopulation (M): ", pop, "\nLife Expectancy: ", lifeExp, "\nGdp per capita: ", gdpPercap, sep="")) %>%
# Classic ggplot
ggplot( aes(x=gdpPercap, y=lifeExp, size = pop, color = continent, text=text)) +
geom_point(alpha=0.7) +
scale_size(range = c(1.4, 19), name="Population (M)") +
scale_color_viridis(discrete=TRUE, guide=FALSE) +
theme_ipsum() +
theme(legend.position="none")
pp <- ggplotly(p, tooltip="text")
pp
<<<<<<< HEAD
p <- ggplot(diamonds, aes(carat, price, color=cut))
p + geom_point()
p <- ggplot(mtcars, aes(mpg, wt, color=factor(cy1)))
p + geom_line()
mtcars
p <- ggplot(mtcars, aes(mpg, wt, color=factor(cyl))
p + geom_line()
p <- ggplot(mtcars, aes(mpg, wt, color=factor(cyl))
p + geom_line()
p <- ggplot(mtcars, aes(mpg, wt, color=factor(cyl))
p + geom_line()
p <- ggplot(mtcars, aes(mpg, wt, color=factor(cyl))
p + geom_line()
p <- ggplot(mtcars, aes(mpg, wt, color=factor(cyl))
p + geom_line()
p <- ggplot(mtcars, aes(mpg, wt, color=factor(cyl))
p + geom_line()
p <- ggplot(mtcars, aes(mpg, wt, color=factor(cyl)))
p + geom_line()
p <- ggplot(diamonds, aes(price))
p <- ggplot(diamonds, aes(price))
p <- ggplot(diamonds, aes(price))
p <- ggplot(diamonds, aes(price))
p <- ggplot(diamonds, aes(price))
p
p <- ggplot(diamonds, aes(price))
p
p + stat_bin(aes(fill=cut),geom="bar")
p + stat_bin(aes(fill=..density..), geom="bar")
p + stat_bin(aes(fill=cut),geom="bar")
diamonds
help(cut)
p + stat_bin(aes(fill=..density..), geom="bar")
p + stat_bin(aes(fill=cut),geom="bar")
p + stat_bin(aes(fill=..density..), geom="bar")
p + stat_bin(aes(fill=cut),geom="bar")
ggplot(diamonds, aes(price)) +
stat_bin(aes(fill=cut),geom="bar")
ggplot(diamonds, aes(price)) +
stat_bin(aes(fill=cut),geom="bar") +
stat_bin(aes(fill=..density..), geom="bar")
p <- (diamonds, aes(price))
p + ptat_bin(aes(fill=cut),geom="bar")
p <- (diamonds, aes(price))
p + stat_bin(aes(fill=cut), geom='area')
p + stat_bin(aes(color = cut, size = ..density..), geom;'point')
p + stat_bin(aes(color = cut, size = ..density..), geom='point')
p <- ggplot(diamonds, aes(carat, price, color=cut))
p + geom_point()
p <- ggplot(mtcars, aes(mpg, wt, color=factor(cyl)))
p + geom_line()
p <- ggplot(mtcars, aes(mpg, wt, color=factor(cyl)))
p + geom_point()
p <- ggplot(mtcars, aes(mpg, wt, color=factor(cyl)))
p + geom_line()
p <- ggplot(diamonds, aes(price))
p + ptat_bin(aes(fill=cut),geom="bar")
p <- ggplot(diamonds, aes(price))
p + stat_bin(aes(fill=cut),geom="bar")
=======
#$@#$#$#$#$#$#$#$#
p <- ggplot(diamonds, aes(price))
p + stat_bin(aes(fill=cut),geom="bar")
p+ stat_bin(aes(fill=..density..), geom="bar")
p <- ggplot(diamonds, aes(price))
p + stat_bin(aes(fill=cut), geom='area')
p + stat_bin(aes(color = cut, size = ..density..), geom='point')
p <- ggplot(diamonds, aes(price))
p + stat_bin(aes(fill=cut),geom="bar")
p + stat_bin(aes(fill=..density..), geom="bar")
p + stat_bin( aes(fill=cut, size =..density..), geom = "point")
p<- ggplot(diamonds, aes(price))
p + stat_bin( aes(fill=cut, size =..density..), geom = "point")
p<- ggplot(diamonds, aes(price))
p + stat_bin( aes(fill = cut), geom = 'area')
p + stat_bin( aes(color=cut, size =..density..), geom = "point")
p<- ggplot(diamonds, aes(price))
p + stat_bin( aes(fill = cut), geom = 'area')
p<- ggplot(diamonds, aes(price))
p + stat_bin( aes(fill = cut), geom = 'area')
p + stat_bin(aes(color = cut, size = ...density..), geom = 'point')
p + stat_bin(aes(color = cut, size =..density..), geom = 'point')
p <- ggplot(diamonds, aes(  carat, price, color = cut ))
p <- p + geom_point() + ggtitle( "다이아몬드 무게와 가격의 상관관계")
print(p)
p <- ggplot(diamonds, aes(  carat, price, color = cut ))
p <- ggplot(diamonds, aes(  carat, price, color = cut ))
p <- p + geom_point() + ggtitle( "다이아몬드 무게와 가격의 상관관계")
print(p)
p + theme(
title = element_text( color = "blue", size = 25),
p <- ggplot(diamonds, aes(  carat, price, color = cut ))
p <- p + geom_point() + ggtitle( "다이아몬드 무게와 가격의 상관관계")
print(p)
p + theme(
title = element_text( color = "blue", size = 25))
p + theme(
title = element_text( color = "blue", size = 25))
p + theme(
title = element_text( color = "blue", size = 25),
axis.title = element_text(size =14, face = "bold"),
axis.title.x = element_text(color = "green"),
axis.title.y = element_text(color = 'green'),
axis.text = element_text(size = 14),
axis.text.y = element_text( color = "red"),
axis.text.x = element_text(color = 'purple'),
legend.title = element_text(size = 20, face = "bold", color = 'red'),
legend.position = 'bottom',
legend.direction = "horizontal"
)
p <- ggplot(diamonds, aes(  carat, price, color = cut ))
p <- p + geom_point() + ggtitle( "다이아몬드 무게와 가격의 상관관계")
print(p)
p + theme(
title = element_text( color = "blue", size = 25),
axis.title = element_text(size =14, face = "bold"),
axis.title.x = element_text(color = "green"),
axis.title.y = element_text(color = 'green'),
axis.text = element_text(size = 14),
axis.text.y = element_text( color = "red"),
axis.text.x = element_text(color = 'purple'),
legend.title = element_text(size = 20, face = "bold", color = 'red'),
legend.position = 'bottom',
legend.direction = "horizontal"
)
ggplot( data = mpg ) +
geom_point( mapping = aes(x=displ, y = hwy))
month <- c(1,2,3,4,5,6)
rain <- c(55,50,45,50,60,70)
df <- data.frame(month, rain)
df
ggplot( df, aes( x = month, y = rain)) +
geom_bar( stat = "identity", width = 0.7 , fill = "steelblue")
ggplot( df, aes( x = month, y = rain)) +
geom_bar( width = 0.7 , fill = "steelblue")
month <- c(1,2,3,4,5,6)
rain <- c(55,50,45,50,60,70)
df <- data.frame(month, rain)
df
ggplot( df, aes( x = month, y = rain)) +
geom_bar( stat = "identity", width = 0.7 , fill = "steelblue")
identity
ggplot( df, aes( x = month, y = rain)) +
geom_bar( stat = "identity", width = 0.7 , fill = "steelblue") +
ggtitle("월별 강수량") +
theme( plot.title = element_text( size = 25, face = "bold", colour = "steelblue")) +       # 테마는 ggtitle에 대한것. plot.title = element_text( )
labs( x = "월", y = "강수량") +                                                             # labs는 레이블 지정
coord_flip()                                                                              #  coord_flip() ->  그래프를 가로로 뉘어라
ggplot( df, aes( x = month, y = rain)) +
geom_bar( stat = "identity", width = 0.7 , fill = "steelblue") +
ggtitle("월별 강수량") +
theme( title = element_text( size = 25, face = "bold", colour = "steelblue")) +       # 테마는 ggtitle에 대한것. plot.title = element_text( )
labs( x = "월", y = "강수량") +                                                             # labs는 레이블 지정
coord_flip()                                                                              #  coord_flip() ->  그래프를 가로로 뉘어라
ggplot( df, aes( x = month, y = rain)) +
geom_bar( stat = "identity", width = 0.7 , fill = "steelblue") +
ggtitle("월별 강수량") +
theme( plot.title = element_text( size = 25, face = "bold", colour = "steelblue")) +       # 테마는 ggtitle에 대한것. plot.title = element_text( )
labs( x = "월", y = "강수량") +                                                             # labs는 레이블 지정
coord_flip()
ggplot( iris, aes( x = Petal.Length)) +                    # x 값을 지정 (y 값은 별로 필요 x )
geom_histogram( binwidth = 0.5 )                       # 연속형이니 카운트 단위 지정해야.  0.5 단위로 카운트 해라. (범주형은 범주마다 카운트 되니까 기준 따로 필요 없다 )
ggplot( iris, aes( x = Sepal.Width, fill = Species, color = Species)) +   # fill  : 색상을 품종 별로 채우 겠다(종은 범주형이니 가능), color : 막대의 경계선.
geom_histogram( binwidth = 0.5, position = "dodge") +                   # position : 품종이 3 개인데 품종별로 각각 그려라   = "dodge"
theme( legend.position = "top")                                         # theme은           . legend.position : 범례
year <- 1937:1960
cnt <- as.vector( airmiles )
df <- data.frame( year, cnt )
head(df)
ggplot( df, aes( x = year, y = cnt )) +
geom_line( col = "red")
ggplot( df, aes( x = year, y = cnt )) +
geom_line( col = "red ")
ggplot( economics, aes(x = date, y = psavert )) +
geom_line() +
geom_abline( intercept = 12.18671, slope = -0.0005444)
ggplot( economics, aes(x = date, y = psavert )) +
geom_line() +
geom_hline( yintercept = mean( economics$psavert))
x_inter <- filter( economics, psavert == min(economics$psavert))$date             # filter로  최소값과 같은 데이터를 끄집어내고 그것의 날짜 정보를
ggplot( economics, aes(x=date, y=psavert)) +                                      # x 에 위에서의 날짜 정보를 넣음. 그려면 날짜에 수직선이 그려짐.
geom_line() +
geom_vline( xintercept = x_inter)
ggplot(mccars, aes(gear)) +
geom_bar( )
ggplot(mtcars, aes(gear)) +
geom_bar( )
ggplot(mtcars$gear) +
geom_bar( )
ggplot(mtcars aes( gear )) +
labs(x='기어수', y='빈도수') +
geom_bar( )
ggplot(mtcars aes( gear )) +
geom_bar(labs(x='기어수', y='빈도수') )
ggplot(mtcars aes( gear )) +
labs( x = '기어수')+
geom_bar()
ggplot(mtcars aes( gear )) +
geom_bar()
ggplot(mtcars, aes( gear )) +
geom_bar()
ggplot(mtcars, aes( gear )) +
geom_bar() +
ggtitle( '기어의 수 ')+
labs(x = '기어의수 ' , y = '빈도수')
ggplot ( mtcars, aes(cyl), fill = 'green')
ggplot ( mtcars, aes(cyl), color = 'green')
ggplot ( mtcars, aes(cyl), color = 'green') +
geom_bar()
ggplot ( mtcars, aes(cyl), color = '3') +
geom_bar()
>>>>>>> ca4a4dcdedf2da1c83c929f62e18efc6ebcf85e3
ggplot ( mtcars, aes(cyl), color = '3') +
geom_bar()
ggplot ( mtcars, aes(cyl), color = '3') +
geom_bar()
ggplot ( mtcars, aes(cyl), color = '3') +
geom_bar()
ggplot ( mtcars, aes(cyl), color = '3') +
geom_bar()
ggplot ( mtcars, aes(cyl), color = '3') +
geom_bar()
ggplot ( mtcars, aes(cyl), color = '3') +
geom_bar()
ggplot ( mtcars, aes(cyl), color = '3') +
geom_bar()
ggplot ( mtcars, aes(cyl), color = '3') +
geom_bar()
ggplot ( mtcars, aes(cyl), color = '3') +
geom_bar()
ggplot ( mtcars, aes(cyl), color = '3') +
geom_bar()
ggplot ( mtcars, aes(cyl), color = '3') +
geom_bar()
ggplot ( mtcars, aes(cyl), color = '3') +
geom_bar()
ggplot ( mtcars, aes(cyl), color = '3') +
geom_bar()
ggplot ( mtcars, aes(cyl), color = '3') +
geom_bar()
library(tidyverse)
ggplot ( mtcars, aes(cyl), color = '3') +
geom_bar()
ggplot(mtcars, mpg) +
geom_histogram(binwidth = 0.5 )
ggplot(mtcars, mpg) +
geom_histogram(binwidth = 0.5 )
ggplot(mtcars, aes( mpg )) +
geom_histogram(binwidth = 0.5 )
ggplot( trees, aes(Girth)) +
geom_histogram( binwidth = 3.0 , fill = steelblue )
ggplot( trees, aes(Girth)) +
geom_histogram( binwidth = 3.0 , color = steelblue )
ggplot( trees, aes(Girth)) +
geom_histogram( binwidth = 3.0 , color = steelblue )
ggplot( trees, aes(Girth)) +
geom_histogram( binwidth = 3.0 , color = steelblue )
ggplot( trees, aes(Girth)) +
geom_histogram( binwidth = 3.0 , color = steelblue )
ggplot( trees, aes(Girth)) +
geom_histogram( binwidth = 3.0 , color = steelblue )
ggplot( trees, aes(Girth)) +
geom_histogram( binwidth = 3.0 , color = 'steelblue' )
ggplot( trees, aes(Girth)) +
geom_histogram( binwidth = 3.0 , fill = 'steelblue' )
ggplot( trees, aes(Girth)) +
geom_histogram( binwidth = 3.0 , fill = 'steelblue',  ) +
ggtitle( '나무의 나무둘레') +
labs( x = '나무둘레', y = '갯수' )
ggplot(mtcars, aes( x = mpg, y = wt)) +
geom_point()
ggplot(mtcars, aes( x = mpg, y = wt), fill = gear) +
geom_point()
ggplot(mtcars, aes( x = mpg, y = wt), fill = gear) +
geom_point()
ggplot(mtcars, aes( x = mpg, y = wt), fill = gear) +
geom_point()
ggplot(mtcars, aes( x = mpg, y = wt), fill = gear) +
geom_point()
ggplot(mtcars, aes( x = mpg, y = wt), fill = gear) +
geom_point()
ggplot(mtcars, aes( x = mpg, y = wt), fill = gear) +
geom_point()
ggplot(mtcars, aes( x = mpg, y = wt), fill = gear) +
geom_point()
ggplot(mtcars, aes( x = mpg, y = wt), fill = gear) +
geom_point()
ggplot(mtcars, aes( x = mpg, y = wt), fill = gear) +
geom_point()
ggplot(mtcars, aes( x = mpg, y = wt), fill = gear) +
geom_point()
ggplot(mtcars, aes(gear), fill = cut ) +
labs( x = mtcars , y = mpg) +
geom_point()
ggplot(mtcars, aes(gear), fill = cut ) +
labs( x = 'mtcars' , y = 'mpg') +
geom_point()
ggplot(mtcars, aes(gear), fill = cut ) +
labs( x = 'mtcars' , y = 'mpg') +
geom_point()
ggplot(mtcars, aes(gear), color = cut ) +
labs( x = 'mtcars' , y = 'mpg') +
geom_point()
ggplot(mtcars, aes(gear), color = cut ) +
labs( x = 'mtcars' , y = 'mpg') +
geom_point()
ggplot(mtcars, aes(gear), color = cut ) +
labs( x = 'mtcars' , y = 'mpg') +
geom_point()
ggplot(mtcars, aes(gear), color = cut ) +
labs( x = 'mtcars' , y = 'mpg') +
geom_point()
ggplot(mtcars, aes(gear, color = cut) ) +
labs( x = 'mtcars' , y = 'mpg') +
geom_point()
ggplot(mtcars, aes(gear, color = cut) ) +
labs( x = 'mtcars' , y = 'mpg') +
geom_point()
ggplot(mtcars, aes(gear, color = cut) ) +
labs( x = 'mtcars' , y = 'mpg') +
geom_point()
ggplot(mtcars, aes(gear) +
labs( x = 'mtcars' , y = 'mpg') +
ggplot(mtcars, aes(gear) +
labs( x = 'mtcars' , y = 'mpg') +
geom_point()
ggplot(mtcars, aes(gear)) +
labs( x = 'mtcars' , y = 'mpg') +
geom_point()
ggplot(mtcars, aes(gear)) +
labs( x = 'mtcars' , y = 'mpg') +
geom_point()
ggplot(mtcars, aes ( mpg, wt ))
p <- p + ggplot(mtcars, aes(mpg, wt))
print(p)
ggplot(mtcars, aes ( mpg, wt ))
p <- p + geom_point(mtcars, aes(mpg, wt))
print(p)
ggplot(mtcars, aes ( mpg, wt ))
p <- p + geom_point(mtcars, aes(mpg, wt))
print(p)
p <- ggplot(mtcars, aes ( mpg, wt ))
p <- p + geom_point(mtcars, aes(mpg, wt))
print(p)
p <- ggplot(mtcars, aes ( mpg, wt ))
p <- p + geom_point( gear, colot = cut )
print(p)
p <- ggplot(mtcars, aes ( mpg, wt ))
p <- p + geom_point( gear, colot = cut )
print(p)
p <- ggplot(mtcars, aes ( mpg, wt ))
p <- p + geom_point( gear, color = cut )
print(p)
p <- ggplot(mtcars, aes ( mpg, wt ))
p <- p + geom_point( gear, color = cut )
print(p)
p <- ggplot(mtcars, aes ( mpg, wt ))
p <- p + geom_point( gear, color = cut )
print(p)
p <- ggplot(mtcars, aes ( mpg, wt ))
p <- p + geom_point( gear, color = cut )
print(p)
p <- ggplot(mtcars, aes ( mpg, wt ))
p <- p + geom_point( gear, color = cut )
print(p)
p <- ggplot(mtcars, aes ( mpg, wt ))
p <- p + geom_point( gear, color = cut )
print(p)
ggplot( mtcars,aes(mpg, cyl)) +
geom_boxplot()
