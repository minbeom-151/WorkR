korean = c( 75, 60, 90 ))
z <- merge(x, y, by = c("name") )
z
x <- data.frame( name = c( "a", "b", "c"),
mat = c( 90, 80, 40))
y <- data.frame( name = c("a", "b", "d"),
korean = c( 75, 60, 90 ))
merge( x, y, by.x = c("name"),
by.y = c("sname"))
x <- data.frame( name = c( "a", "b", "c"),
mat = c( 90, 80, 40))
y <- data.frame( sname = c("a", "b", "d"),
korean = c( 75, 60, 90 ))
merge( x, y, by.x = c("name"),
by.y = c("sname"))
install.packages( "dplyr")
library( dplyr )
df <- data.frame( var1 = c( 1, 2, 1),
var2 = c( 2, 3, 3) )
df
# rename( ) : 이름변경
df <- rename(df, v1 = var1, v2 = var2)
df
df$sum <- df$v1 + df$v2
df
df[ 2, 1 ] <- 5
df
df <- data.frame( id = c( 1, 2, 3, 4, 5, 6),
class = c(1, 1, 1, 1, 2, 2),
math = c( 50, 60, 45, 30, 25, 50),
english = c( 98, 97, 86, 98, 80, 89),
science = c( 50, 60, 78, 58, 65, 98))
df
df %>% filter( class == 1 )
df %>% filter( class == 2 )
df %>% filter( class != 1 )
df %>% filter( class != 2 )
df <- data.frame( id = c( 1, 2, 3, 4, 5, 6),
class = c(1, 1, 1, 1, 2, 2),
math = c( 50, 60, 45, 30, 25, 50),
english = c( 98, 97, 86, 98, 80, 89),
science = c( 50, 60, 78, 58, 65, 98))
df
df %>% filter( class == 1 )
df %>% filter( class == 2 )
df %>% filter( class != 1 )
df %>% filter( class != 2 )
df %>% filter( class == 1 ) %>% filter( math == 50)
df %>% filter( science > 70 )
df %>% filter( math < 50 )
df %>% filter( class == 1 & math >= 50 )
df %>% filter( class >= 1 | english >= 90 )
df %>% filter( class %in% c( 1, 3, 5) )
df %>% filter( science > 70 )
df %>% filter( class == 1 & math >= 50 )
df %>% filter( class >= 1 | english >= 90 )
df %>% filter( class %in% c( 1, 3, 5) )
df %>% filter( class %in% c( 1, 3, 5) )
class1 <- df %>% filter( class == 1)
class2 <- df %>% filter( class == 2)
class1
class2
df %>% select( math )
df %>% select( science)
df %>% select( -math)
df %>% select(class, math, science)
df %>%
filter( class == 1 ) %>%
select( science )
df %>%
select( id, science ) %>%
head()
df %>%
select( id, science ) %>%
head
df %>%
select( id, science ) %>%
sum
df %>%
select( id, science ) %>%
max
df %>%
select( id, science ) %>%
head
df %>% arrange( science )
df %>% arrange( desc(science))
df %>%
mutate( total = math + english + science) %>%
head
df %>%
mutate( total = math + english + science,
average = (math + english + science) / 3 ) %>%
head
df %>%
mutate( grade = ifelse( sciencs >= 60, 'pass', 'fail')) %>%
head
df %>%
mutate( grade = ifelse( science >= 60, 'pass', 'fail')) %>%
head
df %>%
mutate( total = math + english + science,
average = (math + english + science) / 3 ) %>%
mutate( grade = ifelse(average >= 90, 'pass',
ifelse(average < 60, 'fail',
'normal'))) %>%
head
df %>%
mutate( total = math + english + science,
average = (math + english + science) / 3 ) %>%
arrange( desc(average)) %>%
head
head
df %>%
mutate( total = math + english + science,
average = (math + english + science) / 3 ) %>%
mutate( grade = ifelse(average >= 90, 'pass',
ifelse(average < 60, 'fail',
'normal'))) %>%
df %>%
mutate( total = math + english + science,
average = (math + english + science) / 3 ) %>%
mutate( grade = ifelse(average >= 90, 'pass',
ifelse(average < 60, 'fail',
'normal'))) %>%
head
df %>%
mutate( total = math + english + science,
average = (math + english + science) / 3 ) %>%
mutate( grade = ifelse(average >= 90, 'pass',
ifelse(average < 60, 'fail',
'normal'))) %>%
head
df %>%
mutate( total = math + english + science,
average = (math + english + science) / 3 ) %>%
arrange( desc(average)) %>%
all
df %>%
mutate( total = math + english + science,
average = (math + english + science) / 3 ) %>%
arrange( desc(average)) %>%
all
df %>%
mutate( total = math + english + science,
average = (math + english + science) / 3 ) %>%
arrange( desc(average)) %>%
head
df.sort %>%
mutate( total = math + english + science,
average = (math + english + science) / 3 ) %>%
arrange( desc(average)) %>%
df.sort
df.sort <- df %>%
mutate( total = math + english + science,
average = (math + english + science) / 3 ) %>%
arrange( desc(average)) %>%
df.sort
df.sort <- df %>%
mutate( total = math + english + science,
average = (math + english + science) / 3 ) %>%
arrange( desc(average))
df.sort
df %>%
mutate( total = math + english + science,
average = (math + english + science) / 3 ) %>%
arrange( desc(average)) %>%
head
## sort는 입력순서 평균순서
df.sort <- df %>%
mutate( total = math + english + science,
average = (math + english + science) / 3 ) %>%
arrange( desc(average))
df.sort
df %>% summarise( mean_math = mean(math))
df %>%
group_by(class) %>%
summarise( mean_math = mean(math),
mean_english = mean(english),
mean_science = mean(science),
n = n()
)
df %>% summarise( mean_math = mean(math))
df %>%
group_by(class) %>%
summarise( mean_math = mean(math),
mean_english = mean(english),
mean_science = mean(science),
n = n() )
df %>% summarise( mean_math = mean(math))
df %>%
group_by(class) %>%                           # class로 그루핑 ( 1반 2반... )
summarise( mean_math = mean(math),
mean_english = mean(english),
mean_science = mean(science),
n = n() )
str( ggplot2:mpg )
mpg <- data.frame( ggplot2:mpg)
dim(mpg)
str(mpg)
head(mpg)
view(mpg)
str( ggplot2::mpg )
mpg <- data.frame( ggplot2:mpg)
dim(mpg)
str(mpg)
head(mpg)
view(mpg)
install.packages("ggplot2")
str( ggplot2::mpg )
mpg <- data.frame( ggplot2:mpg)
dim(mpg)
str(mpg)
head(mpg)
view(mpg)
str( ggplot2::mpg )
mpg <- data.frame( ggplot2:mpg)
mpg <- data.frame( ggplot2::mpg)
str( ggplot2::mpg )
mpg <- data.frame( ggplot2::mpg)
dim(mpg)
str(mpg)
head(mpg)
view(mpg)
str( ggplot2::mpg )
mpg <- data.frame( ggplot2::mpg)
dim(mpg)
str(mpg)
head(mpg)
View(mpg)
dim(mpg)
str(mpg
head(mpg)
View(mpg)
str(mpg)
head(mpg)
mpg %>%
group_by( manufacturer, drv) %>%
filter( class == 'suv') %>%
mutate( tot = (cty + cty = mean( tot ))) %>%
arrange( desc(mean_tot)) %>%
head(5)
mpg %>%
group_by( manufacturer, drv) %>%
summarise( mean_city = mean( cty )) %>%
head(10)
mpg %>%
group_by( manufacturer, drv) %>%
filter( class == 'suv') %>%
mutate( tot = (cty + cty = mean( tot ))) %>%
arrange( desc(mean_tot)) %>%
head(5)
mpg %>%
group_by( manufacturer) %>%
filter( class == 'suv') %>%
mutate( tot = (cty + cty = mean( tot ))) %>%
arrange( desc(mean_tot)) %>%
head(5)
mpg %>%
group_by( manufacturer) %>%
filter( class == 'suv') %>%
mutate( tot = (cty + hwy) /2) %>%
summarise(mean_tot = mean(tot)) %>%
arrange( desc(mean_tot)) %>%
head(5)
mpg %>%
group_by( manufacturer, drv) %>%
summarise( mean_city = mean( cty )) %>%
head(10)
mpg %>%
group_by( manufacturer) %>%
filter( class == 'suv') %>%
mutate( tot = (cty + hwy) /2) %>%
summarise(mean_tot = mean(tot)) %>%
arrange( desc(mean_tot)) %>%
head(5)
df1 <- data_frame( id = c( 1,2,3,4,5),
midterm = c( 60, 70, 80, 90, 85))
df2 <- data_frame( id = c( 1,2,3,4,5),
final = c( 60, 70, 80, 90, 85))
total <- left_join( df1, df2, by="id")
df1 <- data.frame( id = c(1,2,3),
address = c('서울', '부산','제주' ),
stringsFactors = F )
df2 <- data.frame(id = c(1,2,4),
gender = c("남", "여","남"))
df1 <- data.frame( id = c( 1,2,3,4,5),
midterm = c( 60, 70, 80, 90, 85))
df2 <- data.frame( id = c( 1,2,3,4,5),
final = c( 60, 70, 80, 90, 85))
total <- left_join( df1, df2, by="id")
df1 <- data.frame( id = c(1,2,3),
address = c('서울', '부산','제주' ),
stringsFactors = F )
df2 <- data.frame(id = c(1,2,4),
gender = c("남", "여","남"))
df1 <- data.frame( id = c( 1,2,3,4,5),
midterm = c( 60, 70, 80, 90, 85))
df2 <- data.frame( id = c( 1,2,3,4,5),
final = c( 60, 70, 80, 90, 85))
total <- left_join( df1, df2, by="id")
df1 <- data.frame( id = c(1,2,3),
address = c('서울', '부산','제주' ),
stringsFactors = F )
df2 <- data.frame(id = c(1,2,4),
gender = c("남", "여","남"))
df1 <- data.frame( id = c( 1,2,3,4,5),
midterm = c( 60, 70, 80, 90, 85))
df2 <- data.frame( id = c( 1,2,3,4,5),
final = c( 60, 70, 80, 90, 85))
total <- left_join( df1, df2, by="id")
df1 <- data.frame( id = c(1,2,3),
address = c('서울', '부산','제주' ),
stringsFactors = F )
df2 <- data.frame(id = c(1,2,4),
gender = c("남", "여","남"))
df1 <- data.frame( id = c( 1,2,3,4,5),
midterm = c( 60, 70, 80, 90, 85))
df2 <- data.frame( id = c( 1,2,3,4,5),
final = c( 60, 70, 80, 90, 85))
total <- left_join( df1, df2, by="id")
df1 <- data.frame( id = c(1,2,3),
address = c('서울', '부산','제주' ),
stringsFactors = F )
df2 <- data.frame(id = c(1,2,4),
gender = c("남", "여","남"))
df1 <- data.frame( id = c( 1,2,3,4,5),
midterm = c( 60, 70, 80, 90, 85))
df2 <- data.frame( id = c( 1,2,3,4,5),
final = c( 60, 70, 80, 90, 85))
total <- left_join( df1, df2, by="id")
df1 <- data.frame( id = c( 1,2,3,4,5),
midterm = c( 60, 70, 80, 90, 85))
df2 <- data.frame( id = c( 1,2,3,4,5),
final = c( 60, 70, 80, 90, 85))
total <- left_join( df1, df2, by="id")
df1 <- data.frame( id = c( 1,2,3,4,5),
midterm = c( 60, 70, 80, 90, 85))
df2 <- data.frame( id = c( 1,2,3,4,5),
final = c( 60, 70, 80, 90, 85))
total <- left_join( df1, df2, by="id")
df1 <- data.frame( id = c( 1,2,3,4,5),
midterm = c( 60, 70, 80, 90, 85))
df2 <- data.frame( id = c( 1,2,3,4,5),
final = c( 60, 70, 80, 90, 85))
total <- left_join( df1, df2, by="id")
total
df_left <- left_join( df1,df2,by='id')
df_left
df_inner <- inner_join( df1, df2, by='id')
df_inner
df1 <- data.frame( id = c(1,2,3),
address = c('서울', '부산','제주' ),      # stringsFactors = F -> 펙터타입으로 바꾸지 말고 ?/
stringsFactors = F )
df2 <- data.frame(id = c(1,2,4),
gender = c("남", "여","남"))
df_left <- left_join( df1,df2,by='id')     # -> df1이 기준. df1에 있는것은 다추가. df2는 id가 동일한것만
df_left
df_inner <- inner_join( df1, df2, by='id')
df_inner
df_full <- full_join(df1, df2, by='id')
df_full
df_inner <- inner_join( df1, df2, by='id')
df_inner
df_full <- full_join(df1, df2, by='id')
df_full
df_left <- left_join( df1,df2,by='id')     # -> df1이 기준. df1에 있는것은 다추가. df2는 id가 동일한것만
df_left
df1 <- data.frame( id = c( 1,2,3,4,5),
test = c( 60, 70, 80, 90, 85))
df2 <- data.frame( id = c( 1,2,3,4,5),
test = c( 60, 70, 80, 90, 85))
df_all <- bind_rows( df1, df2 )
df_all
install.packages( 'psych')
library( psych)
summary( mtcars )
describe( mtcars )
install.packages( 'descr')
df <- data.frame(id = c(1,2,4),
gender = c("남", "여","남"))
table(df$gender)
freq(df$gender)
library( psych)
require( descr )
table(df$gender)
freq(df$gender)
freq(df$gender, plot = F )
ds <- state.x77
ds[2,3] <- NA; ds[3,1] <- NA; ds[2,4] <- NA; ds[4,3] <- NA
head(ds)
ds <- state.x77
ds[2,3] <- NA; ds[3,1] <- NA; ds[2,4] <- NA; ds[4,3] <- NA
head(ds)
na_ds <- apply(ds, 2,  function( y ) sum( is.na( y )))
na_ds
ds <- state.x77
ds[2,3] <- NA; ds[3,1] <- NA; ds[2,4] <- NA; ds[4,3] <- NA
head(ds)
na_ds <- apply(ds, 2,  function( y ) sum( is.na( y )))
na_ds
ds <- state.x77
ds[2,3] <- NA; ds[3,1] <- NA; ds[2,4] <- NA; ds[4,3] <- NA
head(ds)
ds <- state.x77
ds[2,3] <- NA; ds[3,1] <- NA; ds[2,4] <- NA; ds[4,3] <- NA
head(ds)
count_ds <- apply(ds, 2,  function( y ) sum( is.na( y )))
count_ds
str(dS)
ds <- state.x77
ds[2,3] <- NA; ds[3,1] <- NA; ds[2,4] <- NA; ds[4,3] <- NA
head(ds)
str(dS)
str(state.x77)
rowSums( is.na( ds ))
rowSums( is.na( ds ))
sum( rowSums(is.na(ds))>0)
ds[ !complete.cases(ds), ]
ds.new <- ds[compareVersion(ds),]
ds[ !complete.cases(ds), ]
ds.new <- ds[compareVersion(ds),]
ds[ !complete.cases(ds), ]
ds.new <- ds[compareVersion(ds),]
head(ds.new)
ds.new <-  ds[ complete.cases( ds ), ]
head(ds.new)
st <- data.frame(state.x77)
boxplot(st)
str(st)
st <- data.frame(state.x77)
summart(st)
st <- data.frame(state.x77)
summary(st)
out.val <- boxplot.stats( st$Area )$out
out.val <- boxplot.stats( st$Area )$out
st$Area[ st$Area %in% out.val ] <- NA
out.val <- boxplot.stats( st$Area )$out
st$Area[ st$Area %in% out.val ] <- NA
head(st)
st2 <- st[ complete.cases(st), ]
head( st2 )
AQ <- airquality
AQ
str(AQ)
count_AQ <- apply(AQ, 0, function( y ) sum( is.na( y )))
count_AQ
AQ <- airquality
AQ
count_AQ <- apply(AQ, 0, function( y ) sum( is.na( y )))
count_AQ
count_AQ <- apply(AQ, 2, function( y ) sum( is.na( y )))
count_AQ
count_AQ <- apply(AQ, function( y ) sum( is.na( y )))
count_AQ
count_AQ <- apply(AQ, ,function( y ) sum( is.na( y )))
count_AQ
airquality
count_AQ <- apply(airquality, ,function( y ) sum( is.na( y )))
count_AQ
count_AQ <- apply( AQ, 2,
function( y ) sum( is.na( y )))
count_AQ
count_AQ <- apply(AQ,2 ,function( y ) sum( is.na( y )))
count_AQ
AQ
count_AQ <- apply( AQ, 0,
function( y ) sum( is.na( y )))
count_AQ
count_AQ <- apply( AQ, 1,
function( y ) sum( is.na( y )))
count_AQ
count_AQ[ complete.cases(count_AQ), ]
st5 <- count_AQ[ complete.cases(count_AQ), ]
head( st5 )
st5 <- AQ[ complete.cases(AQ), ]
head( st5 )
count_AQ <- apply( AQ, 2,
function( y ) sum( is.na( y )))
count_AQ
head(state.x77)
str(state.x77)
state.x77[ order ( state.x77$Population, decreasing = F),]
head(iris)
# 결과에 1~6 나오는 번호는 데이터 입력 순서 의미.
order(iris$Sepal.Length )
iris[ order ( iris$Sepal.Length ), ]
iris[ order ( iris$Sepal.Length, decreasing = T ), ]
iris[ order ( iris$Sepal.Length, decreasing = T ), ]
iris[ order ( iris$Sepal.Length, decreasing = T ), ]
head(state.x77)
state.x77[ order ( state.x77$Population, decreasing = T ), ]
head(state.x77)
order(state.x77$Population )
head(state.x77)
order(state.x77$Population )
state.x77[ order ( state.x77$Population, decreasing = F),]
state.x77[ order ( state.x77$Population, decreasing = T ), ]
head(iris)                                           # 결과에 1~6 나오는 번호는 데이터 입력 순서 의미.
order(iris$Sepal.Length )                            # 결과에 [ ]는 벡터다. 14는 첫번째 행이 전체중에 14번째 라는 의미
order(state.x77$Population )
head(state.x77)
order(state.x77$Population )
state.x77[ order ( state.x77$Population ), ]
head(state.x77)
order(state.x77$Population )
state.x77[ order ( state.x77$Population ), ]
head(state.x77)
order(state.x77$Population )
state.x77[ order ( state.x77$Population ), ]
head(state.x77)
order(state.x77$Population )
state.x77[ order ( state.x77$Population ), ]
