dim( GNI2014 )
str( GNI2014 )
View( GNI2014 )
treemap( GNI2014, index = c("Continent", "ios3"),
vColor = "GNI",
type = "value",
bg.labels =  "yellow",
title = 'worlds GNI' )
treemap( GNI2014, index = c("Continent", "ios3"),
vcolor = "GNI",
type = "value",
bg.labels =  "yellow",
title = 'worlds GNI' )
treemap( GNI2014, index = c("Continent", "ios3"),
vcolor = "GNI",
type = "value",
bg.labels =  "yellow",
title = "world's GNI" )
treemap( GNI2014, index = c("Continent", "iso3"),
vcolor = "GNI",
type = "value",
bg.labels =  "yellow",
title = "world's GNI" )
treemap( GNI2014, index = c("Continent", "iso3"),
vcolor = "GNI",
type = "value",
bg.labels =  "yellow",
title = "world's GNI" )
treemap( GNI2014, index = c("Continent", "iso3"),
vSize = "population"
vcolor = "GNI",
type = "value",
bg.labels =  "yellow",
title = "world's GNI" )
treemap( GNI2014, index = c("Continent", "iso3"),
vSize = "population",
vcolor = "GNI",
type = "value",
bg.labels =  "yellow",
title = "world's GNI" )
treemap( GNI2014, index = c("Continent", "iso3"),
vSize = "population",
vcolor = "GNI",
type = "value",
bg.labels =  "yellow",
title = "world's GNI" )
treemap( GNI2014, index = c("Continent", "iso3"),
vSize = "population",
vColor = "GNI",
type = "value",
bg.labels =  "yellow",
title = "world's GNI" )
treemap( GNI2014, index = c("Continent", "iso3"),
vSize = "population",
vColor = "GNI",
type = "value",
bg.labels =  "yellow",
title = "world's GNI" )
treemap( GNI2014, index = c("Continent", "iso3"),
vSize = "population",
vColor = "GNI",
type = "value",
bg.labels =  "yellow",
title = "world's GNI" )
treemap( GNI2014, index = c("Continent", "iso3"),
vSize = "population",
vColor = "GNI",
type = "value",
bg.labels =  "yellow",
title = "world's GNI" )
treemap( GNI2014, index = c("Continent", "iso3"),
vSize = "population",
vColor = "GNI",
type = "value",
bg.labels =  "yellow",
title = "world's GNI" )
treemap( GNI2014, index = c("Continent", "iso3"),
vSize = "population",
vColor = "GNI",
type = "value",
bg.labels =  "yellow",
title = "world's GNI" )
library( treemap )
data( GNI2014)
dim( GNI2014 )
str( GNI2014 )
View( GNI2014 )
treemap( GNI2014,
index = c("Continent", "iso3"),
vSize = "population",
vColor = "GNI",
type = "value",
bg.labels =  "yellow",
title = "world's GNI" )
treemap( GNI2014,
index = c("Continent", "iso3"),
vSize = "population",
vColor = "GNI",
type = "value",
bg.labels =  "yellow",
title = "world's GNI" )
treemap( GNI2014,
index = c("Continent", "iso3"),
vSize = "population",
vColor = "GNI",
type = "value",
bg.labels =  "yellow",
title = "world's GNI" )
treemap( GNI2014,
index = c("Continent", "iso3"),
vSize = "population",
vColor = "GNI",
type = "value",
bg.labels =  "yellow",
title = "world's GNI" )
treemap( GNI2014,
index = c("Continent", "iso3"),
vSize = "population",
vColor = "GNI",
type = "value",
bg.labels =  "yellow",
title = "world's GNI" )
treemap( GNI2014,
index = c("continent", "iso3"),
vSize = "population",
vColor = "GNI",
type = "value",
bg.labels =  "yellow",
title = "world's GNI" )
st <- data.frame( state.x77)
st <- data.frame( st, stname = rownames( st ))
treemap( at,
index = c( "stname"),
vSize = "Area",
vColor = "Income",
type = "value",
title = "미국 주별 수입 ")
st <- data.frame( state.x77)
st <- data.frame( st, stname = rownames( st ))
treemap( at,
index = c( "stname"),
vSize = "Area",
vColor = "Income",
type = "value",
title = "미국 주별 수입 ")
st <- data.frame( state.x77)
st <- data.frame( st, stname = rownames( st ))
treemap( st,
index = c( "stname"),
vSize = "Area",
vColor = "Income",
type = "value",
title = "미국 주별 수입 ")
data( GNI2014)
dim( GNI2014 )
str( GNI2014 )
View( GNI2014 )
treemap( GNI2014,
index = c("continent", "iso3"),
vSize = "population",
vColor = "GNI",
type = "value",
bg.labels =  "yellow",
title = "world's GNI" )
st <- data.frame( state.x77)
st <- data.frame( st, stname = rownames( st ))
treemap( st,
index = c( "stname"),
vSize = "Area",
vColor = "Income",
type = "value",
title = "미국 주별 수입 ")
st
symbols( st$Illiteracy, st$Murder,
circles = st$Population,
inches = 0.3,
fg = "white",
bg = "lightgray",
iwd = 1.5 ,
xlab = "rate of Illiteracy",
ylab = "crime(murder) rate",
main = "Illiteracy and Crise",)
text( st$Illiteracy, st$Murder,
rownames( st ),
cex= 0.6 ,
col = "brown")
# The dataset is provided in the gapminder library
library(gapminder)
data <- gapminder %>% filter(year=="2007") %>% dplyr::select(-year)
# Interactive version
p <- data %>%
mutate(gdpPercap=round(gdpPercap,0)) %>%
mutate(pop=round(pop/1000000,2)) %>%
mutate(lifeExp=round(lifeExp,1)) %>%
# Reorder countries to having big bubbles on top
arrange(desc(pop)) %>%
mutate(country = factor(country, country)) %>%
# prepare text for tooltip
mutate(text = paste("Country: ", country, "\nPopulation (M): ", pop, "\nLife Expectancy: ", lifeExp, "\nGdp per capita: ", gdpPercap, sep="")) %>%
# Classic ggplot
ggplot( aes(x=gdpPercap, y=lifeExp, size = pop, color = continent, text=text)) +
geom_point(alpha=0.7) +
scale_size(range = c(1.4, 19), name="Population (M)") +
scale_color_viridis(discrete=TRUE, guide=FALSE) +
theme_ipsum() +
theme(legend.position="none")
# turn ggplot interactive with plotly
library(ggplot2)
library(dplyr)
library(plotly)
library(viridis)
library(hrbrthemes)
# The dataset is provided in the gapminder library
library(gapminder)
data <- gapminder %>% filter(year=="2007") %>% dplyr::select(-year)
# Interactive version
p <- data %>%
mutate(gdpPercap=round(gdpPercap,0)) %>%
mutate(pop=round(pop/1000000,2)) %>%
mutate(lifeExp=round(lifeExp,1)) %>%
# Reorder countries to having big bubbles on top
arrange(desc(pop)) %>%
mutate(country = factor(country, country)) %>%
# prepare text for tooltip
mutate(text = paste("Country: ", country, "\nPopulation (M): ", pop, "\nLife Expectancy: ", lifeExp, "\nGdp per capita: ", gdpPercap, sep="")) %>%
# Classic ggplot
ggplot( aes(x=gdpPercap, y=lifeExp, size = pop, color = continent, text=text)) +
geom_point(alpha=0.7) +
scale_size(range = c(1.4, 19), name="Population (M)") +
scale_color_viridis(discrete=TRUE, guide=FALSE) +
theme_ipsum() +
theme(legend.position="none")
library(ggplot2)
library(dplyr)
library(plotly)
library(viridis)
library(hrbrthemes)
# The dataset is provided in the gapminder library
library(gapminder)
data <- gapminder %>% filter(year=="2007") %>% dplyr::select(-year)
# Interactive version
p <- data %>%
mutate(gdpPercap=round(gdpPercap,0)) %>%
mutate(pop=round(pop/1000000,2)) %>%
mutate(lifeExp=round(lifeExp,1)) %>%
# Reorder countries to having big bubbles on top
arrange(desc(pop)) %>%
mutate(country = factor(country, country)) %>%
# prepare text for tooltip
mutate(text = paste("Country: ", country, "\nPopulation (M): ", pop, "\nLife Expectancy: ", lifeExp, "\nGdp per capita: ", gdpPercap, sep="")) %>%
# Classic ggplot
ggplot( aes(x=gdpPercap, y=lifeExp, size = pop, color = continent, text=text)) +
geom_point(alpha=0.7) +
scale_size(range = c(1.4, 19), name="Population (M)") +
scale_color_viridis(discrete=TRUE, guide=FALSE) +
theme_ipsum() +
theme(legend.position="none")
# turn ggplot interactive with plotly
pp <- ggplotly(p, tooltip="text")
pp
# save the
library(ggplot2)
library(dplyr)
library(plotly)
library(viridis)
library(hrbrthemes)
# The dataset is provided in the gapminder library
library(gapminder)
data <- gapminder %>% filter(year=="2007") %>% dplyr::select(-year)
# Interactive version
p <- data %>%
mutate(gdpPercap=round(gdpPercap,0)) %>%
mutate(pop=round(pop/1000000,2)) %>%
mutate(lifeExp=round(lifeExp,1)) %>%
# Reorder countries to having big bubbles on top
arrange(desc(pop)) %>%
mutate(country = factor(country, country)) %>%
# prepare text for tooltip
mutate(text = paste("Country: ", country, "\nPopulation (M): ", pop, "\nLife Expectancy: ", lifeExp, "\nGdp per capita: ", gdpPercap, sep="")) %>%
# Classic ggplot
ggplot( aes(x=gdpPercap, y=lifeExp, size = pop, color = continent, text=text)) +
geom_point(alpha=0.7) +
scale_size(range = c(1.4, 19), name="Population (M)") +
scale_color_viridis(discrete=TRUE, guide=FALSE) +
theme_ipsum() +
theme(legend.position="none")
# turn ggplot interactive with plotly
pp <- ggplotly(p, tooltip="text")
pp
# save the
library(ggplot2)
library(dplyr)
library(plotly)
library(viridis)
library(hrbrthemes)
# The dataset is provided in the gapminder library
library(gapminder)
data <- gapminder %>% filter(year=="2007") %>% dplyr::select(-year)
# Interactive version
p <- data %>%
mutate(gdpPercap=round(gdpPercap,0)) %>%
mutate(pop=round(pop/1000000,2)) %>%
mutate(lifeExp=round(lifeExp,1)) %>%
# Reorder countries to having big bubbles on top
arrange(desc(pop)) %>%
mutate(country = factor(country, country)) %>%
# prepare text for tooltip
mutate(text = paste("Country: ", country, "\nPopulation (M): ", pop, "\nLife Expectancy: ", lifeExp, "\nGdp per capita: ", gdpPercap, sep="")) %>%
# Classic ggplot
ggplot( aes(x=gdpPercap, y=lifeExp, size = pop, color = continent, text=text)) +
geom_point(alpha=0.7) +
scale_size(range = c(1.4, 19), name="Population (M)") +
scale_color_viridis(discrete=TRUE, guide=FALSE) +
theme_ipsum() +
theme(legend.position="none")
library(ggplot2)
library(dplyr)
library(plotly)
library(viridis)
library(hrbrthemes)
install.packages("plotly")
install.packages("viridis")
install.packages("hrbrthemes")
library(gapminder)
data <- gapminder %>% filter(year=="2007") %>% dplyr::select(-year)
# Interactive version
p <- data %>%
mutate(gdpPercap=round(gdpPercap,0)) %>%
mutate(pop=round(pop/1000000,2)) %>%
mutate(lifeExp=round(lifeExp,1)) %>%
# Reorder countries to having big bubbles on top
arrange(desc(pop)) %>%
mutate(country = factor(country, country)) %>%
# prepare text for tooltip
mutate(text = paste("Country: ", country, "\nPopulation (M): ", pop, "\nLife Expectancy: ", lifeExp, "\nGdp per capita: ", gdpPercap, sep="")) %>%
# Classic ggplot
ggplot( aes(x=gdpPercap, y=lifeExp, size = pop, color = continent, text=text)) +
geom_point(alpha=0.7) +
scale_size(range = c(1.4, 19), name="Population (M)") +
scale_color_viridis(discrete=TRUE, guide=FALSE) +
theme_ipsum() +
theme(legend.position="none")
library(gapminder)
data <- gapminder %>% filter(year=="2007") %>% dplyr::select(-year)
# Interactive version
p <- data %>%
mutate(gdpPercap=round(gdpPercap,0)) %>%
mutate(pop=round(pop/1000000,2)) %>%
mutate(lifeExp=round(lifeExp,1)) %>%
# Reorder countries to having big bubbles on top
arrange(desc(pop)) %>%
mutate(country = factor(country, country)) %>%
# prepare text for tooltip
mutate(text = paste("Country: ", country, "\nPopulation (M): ", pop, "\nLife Expectancy: ", lifeExp, "\nGdp per capita: ", gdpPercap, sep="")) %>%
# Classic ggplot
ggplot( aes(x=gdpPercap, y=lifeExp, size = pop, color = continent, text=text)) +
geom_point(alpha=0.7) +
scale_size(range = c(1.4, 19), name="Population (M)") +
scale_color_viridis(discrete=TRUE, guide=FALSE) +
theme_ipsum() +
theme(legend.position="none")
# The dataset is provided in the gapminder library
library(gapminder)
data <- gapminder %>% filter(year=="2007") %>% dplyr::select(-year)
# Interactive version
p <- data %>%
mutate(gdpPercap=round(gdpPercap,0)) %>%
mutate(pop=round(pop/1000000,2)) %>%
mutate(lifeExp=round(lifeExp,1)) %>%
# Reorder countries to having big bubbles on top
arrange(desc(pop)) %>%
mutate(country = factor(country, country)) %>%
# prepare text for tooltip
mutate(text = paste("Country: ", country, "\nPopulation (M): ", pop, "\nLife Expectancy: ", lifeExp, "\nGdp per capita: ", gdpPercap, sep="")) %>%
# Classic ggplot
ggplot( aes(x=gdpPercap, y=lifeExp, size = pop, color = continent, text=text)) +
geom_point(alpha=0.7) +
scale_size(range = c(1.4, 19), name="Population (M)") +
scale_color_viridis(discrete=TRUE, guide=FALSE) +
theme_ipsum() +
theme(legend.position="none")
pp <- ggplotly(p, tooltip="text")
pp
library(gapminder)
install.packages("gapminder")
data <- gapminder %>% filter(year=="2007") %>% dplyr::select(-year)
# Interactive version
p <- data %>%
mutate(gdpPercap=round(gdpPercap,0)) %>%
mutate(pop=round(pop/1000000,2)) %>%
mutate(lifeExp=round(lifeExp,1)) %>%
# Reorder countries to having big bubbles on top
arrange(desc(pop)) %>%
mutate(country = factor(country, country)) %>%
# prepare text for tooltip
mutate(text = paste("Country: ", country, "\nPopulation (M): ", pop, "\nLife Expectancy: ", lifeExp, "\nGdp per capita: ", gdpPercap, sep="")) %>%
# Classic ggplot
ggplot( aes(x=gdpPercap, y=lifeExp, size = pop, color = continent, text=text)) +
geom_point(alpha=0.7) +
scale_size(range = c(1.4, 19), name="Population (M)") +
scale_color_viridis(discrete=TRUE, guide=FALSE) +
theme_ipsum() +
theme(legend.position="none")
pp <- ggplotly(p, tooltip="text")
pp
data <- gapminder %>% filter(year=="2007") %>% dplyr::select(-year)
# Interactive version
p <- data %>%
mutate(gdpPercap=round(gdpPercap,0)) %>%
mutate(pop=round(pop/1000000,2)) %>%
mutate(lifeExp=round(lifeExp,1)) %>%
# Reorder countries to having big bubbles on top
arrange(desc(pop)) %>%
mutate(country = factor(country, country)) %>%
# prepare text for tooltip
mutate(text = paste("Country: ", country, "\nPopulation (M): ", pop, "\nLife Expectancy: ", lifeExp, "\nGdp per capita: ", gdpPercap, sep="")) %>%
# Classic ggplot
ggplot( aes(x=gdpPercap, y=lifeExp, size = pop, color = continent, text=text)) +
geom_point(alpha=0.7) +
scale_size(range = c(1.4, 19), name="Population (M)") +
scale_color_viridis(discrete=TRUE, guide=FALSE) +
theme_ipsum() +
theme(legend.position="none")
pp <- ggplotly(p, tooltip="text")
pp
# Libraries
library(ggplot2)
library(dplyr)
library(plotly)
library(viridis)
library(hrbrthemes)
# The dataset is provided in the gapminder library
library(gapminder)
data <- gapminder %>% filter(year=="2007") %>% dplyr::select(-year)
# Interactive version
p <- data %>%
mutate(gdpPercap=round(gdpPercap,0)) %>%
mutate(pop=round(pop/1000000,2)) %>%
mutate(lifeExp=round(lifeExp,1)) %>%
# Reorder countries to having big bubbles on top
arrange(desc(pop)) %>%
mutate(country = factor(country, country)) %>%
# prepare text for tooltip
mutate(text = paste("Country: ", country, "\nPopulation (M): ", pop, "\nLife Expectancy: ", lifeExp, "\nGdp per capita: ", gdpPercap, sep="")) %>%
# Classic ggplot
ggplot( aes(x=gdpPercap, y=lifeExp, size = pop, color = continent, text=text)) +
geom_point(alpha=0.7) +
scale_size(range = c(1.4, 19), name="Population (M)") +
scale_color_viridis(discrete=TRUE, guide=FALSE) +
theme_ipsum() +
theme(legend.position="none")
pp <- ggplotly(p, tooltip="text")
pp
p <- ggplot(diamonds, aes(carat, price, color=cut))
p + geom_point()
p <- ggplot(mtcars, aes(mpg, wt, color=factor(cy1)))
p + geom_line()
mtcars
p <- ggplot(mtcars, aes(mpg, wt, color=factor(cyl))
p + geom_line()
p <- ggplot(mtcars, aes(mpg, wt, color=factor(cyl))
p + geom_line()
p <- ggplot(mtcars, aes(mpg, wt, color=factor(cyl))
p + geom_line()
p <- ggplot(mtcars, aes(mpg, wt, color=factor(cyl))
p + geom_line()
p <- ggplot(mtcars, aes(mpg, wt, color=factor(cyl))
p + geom_line()
p <- ggplot(mtcars, aes(mpg, wt, color=factor(cyl))
p + geom_line()
p <- ggplot(mtcars, aes(mpg, wt, color=factor(cyl)))
p + geom_line()
p <- ggplot(diamonds, aes(price))
p <- ggplot(diamonds, aes(price))
p <- ggplot(diamonds, aes(price))
p <- ggplot(diamonds, aes(price))
p <- ggplot(diamonds, aes(price))
p
p <- ggplot(diamonds, aes(price))
p
p + stat_bin(aes(fill=cut),geom="bar")
p + stat_bin(aes(fill=..density..), geom="bar")
p + stat_bin(aes(fill=cut),geom="bar")
diamonds
help(cut)
p + stat_bin(aes(fill=..density..), geom="bar")
p + stat_bin(aes(fill=cut),geom="bar")
p + stat_bin(aes(fill=..density..), geom="bar")
p + stat_bin(aes(fill=cut),geom="bar")
ggplot(diamonds, aes(price)) +
stat_bin(aes(fill=cut),geom="bar")
ggplot(diamonds, aes(price)) +
stat_bin(aes(fill=cut),geom="bar") +
stat_bin(aes(fill=..density..), geom="bar")
p <- (diamonds, aes(price))
p + ptat_bin(aes(fill=cut),geom="bar")
p <- (diamonds, aes(price))
p + stat_bin(aes(fill=cut), geom='area')
p + stat_bin(aes(color = cut, size = ..density..), geom;'point')
p + stat_bin(aes(color = cut, size = ..density..), geom='point')
p <- ggplot(diamonds, aes(carat, price, color=cut))
p + geom_point()
p <- ggplot(mtcars, aes(mpg, wt, color=factor(cyl)))
p + geom_line()
p <- ggplot(mtcars, aes(mpg, wt, color=factor(cyl)))
p + geom_point()
p <- ggplot(mtcars, aes(mpg, wt, color=factor(cyl)))
p + geom_line()
p <- ggplot(diamonds, aes(price))
p + ptat_bin(aes(fill=cut),geom="bar")
p <- ggplot(diamonds, aes(price))
p + stat_bin(aes(fill=cut),geom="bar")
